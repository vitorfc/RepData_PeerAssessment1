}
submit()
submit()
boring_function('My first function!')
boring_function
submit()
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]},c(8, 4, 0)
)
evaluate(function(x){x[length(x)]},c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
telegram("Vitor para Terra")
submit()
submit()
submit()
mad_libs("Sp","good","Car")
mad_libs(place="Sp",adjective="good",noun="Car")
submit()
"Good" %p% "job!"
"Good" %p% "job!"
"good"%p%"job"
`Good%p%Job`
`"Good"%p%"Job"`
"Good" %p% "job!"
info()
submit()
"Good%p%Job"
"Good"%p%"Job"
"Good" %p% "job!"
submit()
"Good" %p% "job!"
info()
skip()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
sapply(cls_list)
cls_vect<-sapply(cls_list)
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat<-sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
lapply(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(dplyr)
cran<-tbl_df()
cran<-tbl_df("mydf")
cran<-tbl_df(mydf)
rm("mydf")
cran]
cran
?group_by
by_package<-group_by(cran,"package")
by_package<-group_by(cran,package)
by_package
summarize(by_package)
summarize(by_package, mean(size))
submiT()
submit()
tbl
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts<-filter(pack_sum, count>679)
top_counts
View(top_counts)
top_counts_sorted<-arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique<-filter(pack_sum, unique>465)
VIew(top_unique)
View(top_unique)
top_unique_sorted<-arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
?gather
gather(students,sex, cuont,-grade)
gather(students,sex, count,-grade)
students2
res<-gather(students2,male1, male2, count, female1, female2, -grade)
res<-gather(students2,male1, male2, count, female1, female2, count,-grade)
gather(students2, male1, male2, count, -grade)
gather(students2, male1, count, -grade)
res<-gather(students2, sex_class, count, -grade)
res
?separate
separate(data = res, col = sex_class, into = c("sex","class"))
submit()
students3
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
?chain
?chain
submit()
submit()
submit()
?spread
submit()
extract_numeric("class5")
submit()
submit()
submit()
students4
submit()
submit()
?unique
submit()
submit(
)
passed
failed
mudate(passed, status="passed")
mutate(passed, status="passed")
passed<-mutate(passed, status="passed")
failed<-mutate(failed, status="failed")
packageVersion('dplyr')
bind_rows(passed, failed)
sat
submit()
select(sat, -contains("*total"))
select(sat, -contatins(*total))
select(sat, -contains(*total))
select(sat, score_range)
select(sat, contains("total"))
select(sat, -contains("total"))
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
v
help(package = lubridate)
this_day<- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label=TRUE)
this_moment<-now()
this_moment
minute(this_moment)
ymd("1989-05-17")
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
ymd(25081985)
dmy(25081985)
ymd("192012")
ymd("//192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment, now())
update(this_moment, hours = 10, minutes = 16, seconds = 0)
update(this_moment, hours = hour(now), minutes = minute(now()), seconds = second(now()))
this_moment<-update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
nyc<-now()
nyc<-now("America/New_York")
nyc
depart<-nyc+days(2)
depart
depart<-update(depart, hours=17, minutes=34)
depart
called_arrive<-depart+hours(15) + minutes(50)
arrive<-depart+hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
arrive
arrive <- depart + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
depart
arrive
depart
info()
skip()
arrive <- depart + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
skip()
info()
nxt()
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive<-with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time<-mdy("June 17, 2008",tz = "Singapore")
last_time
?new_interval
how_long<-new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(planes)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20,replace=FALSE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips<-sample(100, c(0,1),prob=c(0.3,0.7))
flips<-sample(c(0,1),100,prob=c(0.3,0.7))
flips<-sample(c(0,1),100,probs=c(0.3,0.7))
flips<-sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2<-rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(100, sd=25)
rnorm(10, mean = 100, sd = 25)
rpois(5,sd=10)
?rpois
rpois(5,10)
my_pois<-replicate(100, rpois(5, 10))
my_pois
cm<-colMeans(my_pois)
hist(cm])
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(t1)
weekdays(d1)
months(t1)
quarters(t2)
t3<- "October 17, 1986 08:24"
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
t1>Sys.time()
t1<Sys.time()
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(speed, dist)
plot(cars$speed, cars$dist)
plot(cars$dist, cars$speed)
plot(y=cars$dist, x=cars$speed,xlab="Speed")
plot(y=cars$dist, x=cars$speed,xlab="Speed", ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance", xlab="Speed")
plot(cars, main="My Plot")
plot(cars, sub="My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=c(10,15))
plot(cars, pch=2)
mtcars
data(mtcars)
?boxplot
boxplot(data=mtcars, formula=mpg~cyl)
boxplot(data=mtcars, formula=mtcars$mpg~mtcars$cyl)
boxplot(data=mtcars, formula=mtcars$mpg~mtcars$cyl,x=1)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
clear
?Devices
ls()
y<-rnorm(19)
x<-rnorm(20)
f<-rnorm(10)
g<-rnorm(11)
data<-rnorm(50)
xyplot(y~x|f*g, data)
library(lattice)
library(datasets)
xyplot(y~x|f*g, data)
g<-xyplot(Ozone~Wind, data = airquality)
class(g)
g
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
p.lpoints(10)
p.text("a")
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2])
library(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2")
library("ggplot2")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
pollutantmean <- function(directory, pollutant = "sulfate", id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
if(grep("specdata", directory) == 1) {
directory <- ("./specdata/")
}
vector_med <- c()
v_files <- as.character( list.files(directory) )
f_path <- paste(directory, v_files, sep="")
for(i in id) {
current_file <- read.csv(f_path[i], header=T, sep=",")
head(current_file)
pollutant
v_na_rem <- current_file[!is.na(current_file[, pollutant]), pollutant]
vector_med <- c(vector_med, v_na_rem)
}
result <- mean(vector_med)
return(round(result, 3))
}
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
if(grep("specdata", directory) == 1) {
directory <- ("./specdata/")
}
v_cpt_tab <- complete("specdata", 1:332)
nobs <- v_cpt_tab$nobs
ids <- v_cpt_tab$id[nobs > threshold]
id_len <- length(ids)
arr_vect <- rep(0, id_len)
v_arqs <- as.character( list.files(directory) )
v_path <- paste(directory, v_arqs, sep="")
j <- 1
for(i in ids) {
v_arq_corrt <- read.csv(v_path[i], header=T, sep=",")
arr_vect[j] <- cor(v_arq_corrt$sulfate, v_arq_corrt$nitrate, use="complete.obs")
j <- j + 1
}
result <- arr_vect
return(result)
}
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
if(grep("specdata", directory) == 1) {
directory <- ("./specdata/")
}
# get the length of id vector
v_len <- length(id)
v_c_dta <- rep(0, v_len)
# find all files in the specdata folder
v_arqs <- as.character( list.files(directory) )
v_path <- paste(directory, v_arqs, sep="")
ji <- 1
for (i in id) {
current_file <- read.csv(v_path[i], header=T, sep=",")
v_c_dta[ji] <- sum(complete.cases(current_file))
ji <- ji + 1
}
result <- data.frame(id = id, nobs = v_c_dta)
return(result)
}
cr <- corr("specdata", 150)
head(cr)
getwd()
knit2html()
setwd("C:/R/RepSearch/RepData_PeerAssessment1")
knit2html("PA1_template.Rmd")
install.packages("knit2html")
knit2html("PA1_template.Rmd")
install.packages("knitr")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
install.packages('pander')
library(knitr)
getwd()
knit2html("PA1_template.Rmd")
