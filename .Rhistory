wday(this_day, label=TRUE)
this_moment<-now()
this_moment
minute(this_moment)
ymd("1989-05-17")
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
ymd(25081985)
dmy(25081985)
ymd("192012")
ymd("//192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment, now())
update(this_moment, hours = 10, minutes = 16, seconds = 0)
update(this_moment, hours = hour(now), minutes = minute(now()), seconds = second(now()))
this_moment<-update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
nyc<-now()
nyc<-now("America/New_York")
nyc
depart<-nyc+days(2)
depart
depart<-update(depart, hours=17, minutes=34)
depart
called_arrive<-depart+hours(15) + minutes(50)
arrive<-depart+hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
arrive
arrive <- depart + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
depart
arrive
depart
info()
skip()
arrive <- depart + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
skip()
info()
nxt()
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive<-with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time<-mdy("June 17, 2008",tz = "Singapore")
last_time
?new_interval
how_long<-new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(planes)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20,replace=FALSE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips<-sample(100, c(0,1),prob=c(0.3,0.7))
flips<-sample(c(0,1),100,prob=c(0.3,0.7))
flips<-sample(c(0,1),100,probs=c(0.3,0.7))
flips<-sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2<-rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(100, sd=25)
rnorm(10, mean = 100, sd = 25)
rpois(5,sd=10)
?rpois
rpois(5,10)
my_pois<-replicate(100, rpois(5, 10))
my_pois
cm<-colMeans(my_pois)
hist(cm])
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(t1)
weekdays(d1)
months(t1)
quarters(t2)
t3<- "October 17, 1986 08:24"
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
t1>Sys.time()
t1<Sys.time()
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(speed, dist)
plot(cars$speed, cars$dist)
plot(cars$dist, cars$speed)
plot(y=cars$dist, x=cars$speed,xlab="Speed")
plot(y=cars$dist, x=cars$speed,xlab="Speed", ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance", xlab="Speed")
plot(cars, main="My Plot")
plot(cars, sub="My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=c(10,15))
plot(cars, pch=2)
mtcars
data(mtcars)
?boxplot
boxplot(data=mtcars, formula=mpg~cyl)
boxplot(data=mtcars, formula=mtcars$mpg~mtcars$cyl)
boxplot(data=mtcars, formula=mtcars$mpg~mtcars$cyl,x=1)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
clear
?Devices
ls()
y<-rnorm(19)
x<-rnorm(20)
f<-rnorm(10)
g<-rnorm(11)
data<-rnorm(50)
xyplot(y~x|f*g, data)
library(lattice)
library(datasets)
xyplot(y~x|f*g, data)
g<-xyplot(Ozone~Wind, data = airquality)
class(g)
g
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
p.lpoints(10)
p.text("a")
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2])
library(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2")
library("ggplot2")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
pollutantmean <- function(directory, pollutant = "sulfate", id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
if(grep("specdata", directory) == 1) {
directory <- ("./specdata/")
}
vector_med <- c()
v_files <- as.character( list.files(directory) )
f_path <- paste(directory, v_files, sep="")
for(i in id) {
current_file <- read.csv(f_path[i], header=T, sep=",")
head(current_file)
pollutant
v_na_rem <- current_file[!is.na(current_file[, pollutant]), pollutant]
vector_med <- c(vector_med, v_na_rem)
}
result <- mean(vector_med)
return(round(result, 3))
}
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
if(grep("specdata", directory) == 1) {
directory <- ("./specdata/")
}
v_cpt_tab <- complete("specdata", 1:332)
nobs <- v_cpt_tab$nobs
ids <- v_cpt_tab$id[nobs > threshold]
id_len <- length(ids)
arr_vect <- rep(0, id_len)
v_arqs <- as.character( list.files(directory) )
v_path <- paste(directory, v_arqs, sep="")
j <- 1
for(i in ids) {
v_arq_corrt <- read.csv(v_path[i], header=T, sep=",")
arr_vect[j] <- cor(v_arq_corrt$sulfate, v_arq_corrt$nitrate, use="complete.obs")
j <- j + 1
}
result <- arr_vect
return(result)
}
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
if(grep("specdata", directory) == 1) {
directory <- ("./specdata/")
}
# get the length of id vector
v_len <- length(id)
v_c_dta <- rep(0, v_len)
# find all files in the specdata folder
v_arqs <- as.character( list.files(directory) )
v_path <- paste(directory, v_arqs, sep="")
ji <- 1
for (i in id) {
current_file <- read.csv(v_path[i], header=T, sep=",")
v_c_dta[ji] <- sum(complete.cases(current_file))
ji <- ji + 1
}
result <- data.frame(id = id, nobs = v_c_dta)
return(result)
}
cr <- corr("specdata", 150)
head(cr)
data<-read.csv(file="activity.csv")
tot<-nrow(data)
data.ok<-data[!is.na(data$steps),]
tot.ok<-nrow(data.ok)
setwd("C:/R/RepSearch/RepData_PeerAssessment1")
data<-read.csv(file="activity.csv")
tot<-nrow(data)
data.ok<-data[!is.na(data$steps),]
tot.ok<-nrow(data.ok)
data.mean<-tapply(data.ok$steps, data.ok$date, mean, na.rm=T)
head(data.mean)
data.ok
head(data.ok)
head(data.mean)
str(data.ok)
steps.interval <- aggregate(steps ~ interval, data=data, FUN=mean)
steps.interval
steps.date <- aggregate(steps ~ date, data=data.ok, FUN=sum)
steps.date
barplot(steps.date$steps, names.arg=steps.date$date, xlab="date", ylab="steps")
plot(steps.interval, type="l")
steps.interval$interval[which.max(steps.interval$steps)]
ls()
rm(list=ls())
data<-read.csv(file="activity.csv")
tot<-nrow(data)
data.ok<-data[!is.na(data$steps),]
tot.ok<-nrow(data.ok)
steps.date <- aggregate(steps ~ date, data=data.ok, FUN=sum)
barplot(steps.date$steps, names.arg=steps.date$date, xlab="Date", ylab="Steps")
mean(steps.date$steps)
median(steps.date$steps)
steps.interval <- aggregate(steps ~ interval, data=data, FUN=mean)
plot(steps.interval, type="l")
steps.interval$interval[which.max(steps.interval$steps)]
sum(is.na(activity))
sum(is.na(data))
sum(is.na(data.ok))
activity <- merge(data, steps.interval, by="interval", suffixes=c("",".y"))
nas <- is.na(activity$steps)
activity$steps[nas] <- activity$steps.y[nas]
activity <- activity[,c(1:3)]
steps.date <- aggregate(steps ~ date, data=activity, FUN=sum)
barplot(steps.date$steps, names.arg=steps.date$date, xlab="date", ylab="steps")
mean(steps.date$steps)
median(steps.date$steps)
daytype <- function(date) {
if (weekdays(as.Date(date)) %in% c("Saturday", "Sunday")) {
"weekend"
} else {
"weekday"
}
}
activity$daytype <- as.factor(sapply(activity$date, daytype))
par(mfrow=c(2,1))
for (type in c("weekend", "weekday")) {
steps.type <- aggregate(steps ~ interval,
data=activity,
subset=activity$daytype==type,
FUN=mean)
plot(steps.type, type="l", main=type)
}
par(mfrow=c(2,1))
for (type in c("weekend", "weekday")) {
steps.type <- aggregate(steps ~ interval,
data=activity,
subset=activity$daytype==type,
FUN=mean)
plot(steps.type, type="l", main=type)
}
activity$daytype <- as.factor(sapply(activity$date, daytype))
par(mfrow=c(2,1))
for (type in c("weekend", "weekday")) {
steps.type <- aggregate(steps ~ interval,
data=activity,
subset=activity$daytype==type,
FUN=mean)
plot(steps.type, type="l", main=type)
}
is.na(data)
nrow(is.na(data))
is.na(data$step)
nrow(is.na(data$step))
sum(is.na(data))
sum(data)
nrow(data)
nrow(data.ok)
head(activity)
head(data)
data[data$date=="2012-10-02",]
data[data$date=="2012-10-02",2]
data[data$date=="2012-10-02",1]
mean(data[data$date=="2012-10-02",1])
head(activity)
tail(activity)
activity[activity$daytype=="weekend"]
activity <- merge(data, steps.interval, by="interval", suffixes=c("",".y"))
head(activity)
head(activity,500)
nas <- is.na(activity$steps)
activity$steps[nas] <- activity$steps.y[nas]
activity <- activity[,c(1:3)]
steps.date <- aggregate(steps ~ date, data=activity, FUN=sum)
barplot(steps.date$steps, names.arg=steps.date$date, xlab="date", ylab="steps")
mean(steps.date$steps)
median(steps.date$steps)
mean(data.ok$steps)
median(data.ok$steps)
mean(data$steps)
daytype <- function(date) {
if (weekdays(as.Date(date)) %in% c("Sábado", "Domingo")) {
"weekend"
} else {
"weekday"
}
}
activity$daytype <- as.factor(sapply(activity$date, daytype))
head(activity)
tail(activity)
activity$diasem<-weekdays(as.Date(activity$date))
head(activity)
activity <- merge(data, steps.interval, by="interval", suffixes=c("",".y"))
nas <- is.na(activity$steps)
activity$steps[nas] <- activity$steps.y[nas]
activity <- activity[,c(1:3)]
daytype <- function(date) {
if (weekdays(as.Date(date)) %in% c("sábado", "domingo")) {
"weekend"
} else {
"weekday"
}
}
activity$daytype <- as.factor(sapply(activity$date, daytype))
head(activity)
averages <- aggregate(steps ~ interval + day, data=acitivy, mean)
averages <- aggregate(steps ~ interval + day, data=activity, mean)
averages <- aggregate(steps ~ interval + daytype, data=activity, mean)
ggplot(averages, aes(interval, steps)) + geom_line() + facet_grid(daytype ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
library("ggplot2")
ggplot(averages, aes(interval, steps)) + geom_line() + facet_grid(daytype ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
rm(list=ls())
data <- read.csv("activity.csv")
totalSteps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
qplot(totalSteps, binwidth=1000, xlab="Total number of steps taken per day")
mean(totalSteps, na.rm=TRUE)
median(totalSteps, na.rm=TRUE)
head(totalSteps)
averages <- aggregate(x=list(steps=data$steps), by=list(interval=data$interval),
FUN=mean, na.rm=TRUE)
ggplot(data=averages, aes(x=interval, y=steps)) +
geom_line() +
xlab("5-minute interval") +
ylab("Average number of steps taken")
averages[which.max(averages$steps),]
fillValue <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps)
else
filled <- (averages[averages$interval==interval, "steps"])
return(filled)
}
filledData <- data
filledData$steps <- mapply(fillValue, filledData$steps, filledData$interval)
totalSteps <- tapply(filledData$steps, filledData$date, FUN=sum)
qplot(totalSteps, binwidth=1000, xlab="total number of steps taken each day")
mean(totalSteps)
median(totalSteps)
steps.date <- aggregate(steps ~ date, data=activity, FUN=sum)
barplot(steps.date$steps, names.arg=steps.date$date, xlab="date", ylab="steps")
steps.date <- aggregate(steps ~ date, data=data, FUN=sum)
barplot(steps.date$steps, names.arg=steps.date$date, xlab="date", ylab="steps")
mean(steps.date$steps)
median(steps.date$steps)
averages <- aggregate(steps ~ interval + daytype, data=newds, mean)
newds
rm(list=ls())
library("ggplot2")
data<-read.csv(file="activity.csv")
tot<-nrow(data)
data.ok<-data[!is.na(data$steps),]
tot.ok<-nrow(data.ok)
steps.date <- aggregate(steps ~ date, data=data.ok, FUN=sum)
barplot(steps.date$steps, names.arg=steps.date$date, xlab="Date", ylab="Steps")
mean(steps.date$steps)
median(steps.date$steps)
steps.interval <- aggregate(steps ~ interval, data=data, FUN=mean)
plot(steps.interval, type="l")
steps.interval$interval[which.max(steps.interval$steps)]
sum(is.na(data))
newds <- merge(data, steps.interval, by="interval", suffixes=c("",".y"))
nas <- is.na(newds$steps)
newds$steps[nas] <- newds$steps.y[nas]
newds <- newds[,c(1:3)]
steps.byday <- aggregate(steps ~ date, data=newds, FUN=sum)
barplot(steps.byday$steps, names.arg=steps.byday$date, xlab="date", ylab="steps")
mean(steps.byday$steps)
median(steps.byday$steps)
daytype <- function(date) {
if (weekdays(as.Date(date)) %in% c("sábado", "domingo")) {
"weekend"
} else {
"weekday"
}
}
newds$daytype <- as.factor(sapply(newds$date, daytype))
averages <- aggregate(steps ~ interval + daytype, data=newds, mean)
ggplot(averages, aes(interval, steps)) + geom_line() + facet_grid(daytype ~ .) +
xlab("5-minute interval") + ylab("Total steps")
